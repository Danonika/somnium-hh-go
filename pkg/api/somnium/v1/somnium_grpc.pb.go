// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: somnium.proto

package somniumsystem

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SomniumService_SignIn_FullMethodName       = "/somniumsystem.v1.SomniumService/SignIn"
	SomniumService_SignUp_FullMethodName       = "/somniumsystem.v1.SomniumService/SignUp"
	SomniumService_GetUser_FullMethodName      = "/somniumsystem.v1.SomniumService/GetUser"
	SomniumService_UpdateUser_FullMethodName   = "/somniumsystem.v1.SomniumService/UpdateUser"
	SomniumService_AddSkill_FullMethodName     = "/somniumsystem.v1.SomniumService/AddSkill"
	SomniumService_SkillPool_FullMethodName    = "/somniumsystem.v1.SomniumService/SkillPool"
	SomniumService_GetJob_FullMethodName       = "/somniumsystem.v1.SomniumService/GetJob"
	SomniumService_AddJob_FullMethodName       = "/somniumsystem.v1.SomniumService/AddJob"
	SomniumService_DeleteJob_FullMethodName    = "/somniumsystem.v1.SomniumService/DeleteJob"
	SomniumService_UpdateJob_FullMethodName    = "/somniumsystem.v1.SomniumService/UpdateJob"
	SomniumService_ListJob_FullMethodName      = "/somniumsystem.v1.SomniumService/ListJob"
	SomniumService_JobSwitcher_FullMethodName  = "/somniumsystem.v1.SomniumService/JobSwitcher"
	SomniumService_Apply_FullMethodName        = "/somniumsystem.v1.SomniumService/Apply"
	SomniumService_ApplyHistory_FullMethodName = "/somniumsystem.v1.SomniumService/ApplyHistory"
)

// SomniumServiceClient is the client API for SomniumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SomniumServiceClient interface {
	// Authentication
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	// UserInfo
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Skills
	AddSkill(ctx context.Context, in *AddSkillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SkillPool(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SkillPoolResponse, error)
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error)
	AddJob(ctx context.Context, in *AddJobRequest, opts ...grpc.CallOption) (*AddJobResponse, error)
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListJob(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListJobResponse, error)
	JobSwitcher(ctx context.Context, in *JobSwitcherRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ApplyHistory(ctx context.Context, in *ApplyHistoryRequest, opts ...grpc.CallOption) (*ApplyHistoryResponse, error)
}

type somniumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSomniumServiceClient(cc grpc.ClientConnInterface) SomniumServiceClient {
	return &somniumServiceClient{cc}
}

func (c *somniumServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, SomniumService_SignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *somniumServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, SomniumService_SignUp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *somniumServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, SomniumService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *somniumServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SomniumService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *somniumServiceClient) AddSkill(ctx context.Context, in *AddSkillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SomniumService_AddSkill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *somniumServiceClient) SkillPool(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SkillPoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkillPoolResponse)
	err := c.cc.Invoke(ctx, SomniumService_SkillPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *somniumServiceClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobResponse)
	err := c.cc.Invoke(ctx, SomniumService_GetJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *somniumServiceClient) AddJob(ctx context.Context, in *AddJobRequest, opts ...grpc.CallOption) (*AddJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddJobResponse)
	err := c.cc.Invoke(ctx, SomniumService_AddJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *somniumServiceClient) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SomniumService_DeleteJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *somniumServiceClient) UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SomniumService_UpdateJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *somniumServiceClient) ListJob(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListJobResponse)
	err := c.cc.Invoke(ctx, SomniumService_ListJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *somniumServiceClient) JobSwitcher(ctx context.Context, in *JobSwitcherRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SomniumService_JobSwitcher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *somniumServiceClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SomniumService_Apply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *somniumServiceClient) ApplyHistory(ctx context.Context, in *ApplyHistoryRequest, opts ...grpc.CallOption) (*ApplyHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyHistoryResponse)
	err := c.cc.Invoke(ctx, SomniumService_ApplyHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SomniumServiceServer is the server API for SomniumService service.
// All implementations must embed UnimplementedSomniumServiceServer
// for forward compatibility
type SomniumServiceServer interface {
	// Authentication
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	// UserInfo
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*emptypb.Empty, error)
	// Skills
	AddSkill(context.Context, *AddSkillRequest) (*emptypb.Empty, error)
	SkillPool(context.Context, *emptypb.Empty) (*SkillPoolResponse, error)
	GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error)
	AddJob(context.Context, *AddJobRequest) (*AddJobResponse, error)
	DeleteJob(context.Context, *DeleteJobRequest) (*emptypb.Empty, error)
	UpdateJob(context.Context, *UpdateJobRequest) (*emptypb.Empty, error)
	ListJob(context.Context, *emptypb.Empty) (*ListJobResponse, error)
	JobSwitcher(context.Context, *JobSwitcherRequest) (*emptypb.Empty, error)
	Apply(context.Context, *ApplyRequest) (*emptypb.Empty, error)
	ApplyHistory(context.Context, *ApplyHistoryRequest) (*ApplyHistoryResponse, error)
	mustEmbedUnimplementedSomniumServiceServer()
}

// UnimplementedSomniumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSomniumServiceServer struct {
}

func (UnimplementedSomniumServiceServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedSomniumServiceServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedSomniumServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedSomniumServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedSomniumServiceServer) AddSkill(context.Context, *AddSkillRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSkill not implemented")
}
func (UnimplementedSomniumServiceServer) SkillPool(context.Context, *emptypb.Empty) (*SkillPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkillPool not implemented")
}
func (UnimplementedSomniumServiceServer) GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedSomniumServiceServer) AddJob(context.Context, *AddJobRequest) (*AddJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJob not implemented")
}
func (UnimplementedSomniumServiceServer) DeleteJob(context.Context, *DeleteJobRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (UnimplementedSomniumServiceServer) UpdateJob(context.Context, *UpdateJobRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (UnimplementedSomniumServiceServer) ListJob(context.Context, *emptypb.Empty) (*ListJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJob not implemented")
}
func (UnimplementedSomniumServiceServer) JobSwitcher(context.Context, *JobSwitcherRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobSwitcher not implemented")
}
func (UnimplementedSomniumServiceServer) Apply(context.Context, *ApplyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedSomniumServiceServer) ApplyHistory(context.Context, *ApplyHistoryRequest) (*ApplyHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyHistory not implemented")
}
func (UnimplementedSomniumServiceServer) mustEmbedUnimplementedSomniumServiceServer() {}

// UnsafeSomniumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SomniumServiceServer will
// result in compilation errors.
type UnsafeSomniumServiceServer interface {
	mustEmbedUnimplementedSomniumServiceServer()
}

func RegisterSomniumServiceServer(s grpc.ServiceRegistrar, srv SomniumServiceServer) {
	s.RegisterService(&SomniumService_ServiceDesc, srv)
}

func _SomniumService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomniumServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomniumService_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomniumServiceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SomniumService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomniumServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomniumService_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomniumServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SomniumService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomniumServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomniumService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomniumServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SomniumService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomniumServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomniumService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomniumServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SomniumService_AddSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomniumServiceServer).AddSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomniumService_AddSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomniumServiceServer).AddSkill(ctx, req.(*AddSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SomniumService_SkillPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomniumServiceServer).SkillPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomniumService_SkillPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomniumServiceServer).SkillPool(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SomniumService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomniumServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomniumService_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomniumServiceServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SomniumService_AddJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomniumServiceServer).AddJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomniumService_AddJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomniumServiceServer).AddJob(ctx, req.(*AddJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SomniumService_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomniumServiceServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomniumService_DeleteJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomniumServiceServer).DeleteJob(ctx, req.(*DeleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SomniumService_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomniumServiceServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomniumService_UpdateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomniumServiceServer).UpdateJob(ctx, req.(*UpdateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SomniumService_ListJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomniumServiceServer).ListJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomniumService_ListJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomniumServiceServer).ListJob(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SomniumService_JobSwitcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSwitcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomniumServiceServer).JobSwitcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomniumService_JobSwitcher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomniumServiceServer).JobSwitcher(ctx, req.(*JobSwitcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SomniumService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomniumServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomniumService_Apply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomniumServiceServer).Apply(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SomniumService_ApplyHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomniumServiceServer).ApplyHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomniumService_ApplyHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomniumServiceServer).ApplyHistory(ctx, req.(*ApplyHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SomniumService_ServiceDesc is the grpc.ServiceDesc for SomniumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SomniumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "somniumsystem.v1.SomniumService",
	HandlerType: (*SomniumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _SomniumService_SignIn_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _SomniumService_SignUp_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _SomniumService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _SomniumService_UpdateUser_Handler,
		},
		{
			MethodName: "AddSkill",
			Handler:    _SomniumService_AddSkill_Handler,
		},
		{
			MethodName: "SkillPool",
			Handler:    _SomniumService_SkillPool_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _SomniumService_GetJob_Handler,
		},
		{
			MethodName: "AddJob",
			Handler:    _SomniumService_AddJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _SomniumService_DeleteJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _SomniumService_UpdateJob_Handler,
		},
		{
			MethodName: "ListJob",
			Handler:    _SomniumService_ListJob_Handler,
		},
		{
			MethodName: "JobSwitcher",
			Handler:    _SomniumService_JobSwitcher_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _SomniumService_Apply_Handler,
		},
		{
			MethodName: "ApplyHistory",
			Handler:    _SomniumService_ApplyHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "somnium.proto",
}
